10 curs off : click off : key off : hide : mode 0
20 JCL=1
30 if E=1 then goto 2720
40 if length(7)=0 then load "iconjoe.mbk",7
50 if length(2)=0 then load "hlblock.mbk",2
60 if length(5)=0 then load "defblx.mbk",1 : gosub 2990
70 if length(6)=0 then reserve as data 6,5008 : fill start(6) to start(6)+length(6),0 : loke start(6),38964820 : doke start(6)+4,98 : doke start(6)+6,100
80 if length(15)=0 then reserve as data 15,2560 : fill start(15) to start(15)+length(15),0 : loke start(15),38964820 : doke start(15)+4,2 : doke start(15)+6,2
90 reserve as screen 3 : cls 3
100 SA3=start(3) : SA4=start(4) : SA5=start(5) : SA6=start(6) : SA7=start(7)
110 BAM=((deek(SA5+6)/256)-1)/2
120 world 0,0,320,176,0,1
130 joey 0,0,320,192,0,0,1
140 world 0,0,320,192,0,1
150 dim OX(1),OY(1),BLX(9)
160 MX=x limit(SA6,0,320)
170 MY=y limit(SA6,0,192)
180 WX=160 : WY=96 : FS=0
190 BLX1=1 : BLX2=0 : OMX=0 : OMY=0
200 logic=back : wipe logic : screen swap : wipe logic
210 OBX1=0 : OBY1=0 : OBX2=-100 : OBY2=-100
220 BX1=0 : BY1=0 : BX2=-100 : BY2=-100
230 NBLK=deek(start(5)+6)/512
240 gosub 690
250 SA3=start(3) : SA4=start(4) : SA5=start(5) : SA6=start(6) : SA7=start(7)
260 rem **
270 rem ** Main loop
280 rem **
290 SA3=start(3) : SA4=start(4) : SA5=start(5) : SA6=start(6) : SA7=start(7)
300 world logic,SA5,SA6,CX-160,CY-96,0
310 Z$=inkey$ : C=scancode : M=mouse key : clear key 
320 PX=160 : PY=96
330 if CX<160 then PX=CX
340 if CY<96 then PY=CY
350 if CX-160>MX then PX=160+(CX-160-MX)
360 if CY-96>MY then PY=96+(CY-96-MY)
370 if PX>304 then PX=304
380 if PY>184 then PY=184
390 if M=1 then set block SA6,CX+8,CY+8,BLX1
400 if M=2 then set block SA6,CX+8,CY+8,BLX2
410 DX=x mouse-160 : DY=y mouse-100 : x mouse=160 : y mouse=100
420 CX=CX+DX : if CX>MX+304 then CX=MX+304
430 if CX<0 then CX=0
440 CY=CY+DY : if CY>MY+176 then CY=MY+176
450 if CY<0 then CY=0
460 CCX=boundary(CX+8) : CCY=boundary(CY+8)
470 if C=57 then OMX=x mouse : OMY=y mouse : gosub 880 : clear key : for N=0 to 5 : wait vbl : next N : x mouse=OMX : y mouse=OMY : goto 620
480 if C=97 then clear key : default : gosub 2010 : end 
490 if C=59 then BX1=CCX : BY1=CCY : gosub 2020 : goto 620
500 if C=60 then BX2=CCX : BY2=CCY : gosub 2020 : goto 620
510 if C=61 then gosub 2010 : goto 620
520 if C=62 then gosub 2200 : goto 620
530 if C=63 then gosub 2880 : goto 620
540 if Z$>="1" and Z$<="9" then gosub 2770 : goto 620
550 if C=67 then gosub 2310 : goto 620
560 if C=68 then gosub 2500 : goto 620
570 if C=82 then BLK=BLX1 : gosub 2670 : goto 620
580 if C=71 then BLK=BLX2 : gosub 2670 : goto 620
590 if C=83 then BLK=0 : gosub 2670 : goto 620
600 if C=14 then BLK=0 : gosub 2670 : gosub 2010 : goto 620
610 if C=98 then gosub 2050
620 TP=string(CX) : text logic,0,TP,0,25
630 TP=string(CY) : text logic,0,TP,6,25
640 joey logic,SA7,0,PX,PY,JCL,0
650 screen swap : wait vbl : goto 290
660 rem **
670 rem ** Put blocks on screen
680 rem **
690 A=palt(start(5)) : wait vbl 
700 H=0
710 for N=0 to 30 step 2 : A=deek($FFFF8240+N)
720 B=A mod 16 : A=A/16 : G=A mod 16 : A=A/16 : R=A mod 16
730 B=B+G+R : if B>H then H=B : JCL=N/2
740 next N
750 SA3=start(3) : SA4=start(4) : SA5=start(5) : SA6=start(6) : SA7=start(7)
760 wipe start(3) : JAM=deek(SA7+4)-1 : X=0 : for N=2 to JAM
770 joey SA3,SA7,N,X,0,JCL,0 : X=X+32 : next N
780 X=0 : Y=16 : for N=0 to BAM
790 set block start(15),0,0,N : world X,Y,X+16,Y+16,0,1
800 world SA3,SA5,start(15),0,0,0
810 X=X+16 : if X>=320 then X=0 : Y=Y+16
820 next N
830 world 0,0,320,192,0,1
840 return 
850 rem **
860 rem ** Select block/icon
870 rem **
880 for N=0 to 1 : OX(N)=320 : OY(N)=199 : next N
890 SC=1 : fastcopy start(3),logic : screen swap : fastcopy start(3),logic
900 x mouse=160 : y mouse=100
910 rem **
920 rem ** main loop for block or icon selection
930 rem **
940 Z$=inkey$ : C=scancode : M=mouse key : ZZ=0 : if Z$>="1" and Z$<="9" then ZZ=val(Z$)
950 clear key 
960 skopy 4,start(3),OX(SC),OY(SC),OX(SC)+32,OY(SC)+16,logic,OX(SC),OY(SC)
970 X=boundary(x mouse) : Y=boundary(y mouse) : if Y<16 then CIM=1 else CIM=0
980 joey logic,SA7,CIM,X,Y,JCL,0 : OX(SC)=X : OY(SC)=Y : SC=SC xor 1
990 if M=1 and Y>=16 then gosub 1160 : goto 1050
1000 if M<>0 and Y<16 then gosub 1280 : goto 1050
1010 if M=2 and Y>=16 then gosub 1220 : goto 1050
1020 if ZZ<>0 and Y>=16 then gosub 1100 : goto 1050
1030 if C=57 then return 
1040 if C=97 then clear key : default : gosub 2010 : end 
1050 Z$="" : C=0 : M=0
1060 screen swap : wait vbl : goto 940
1070 rem **
1080 rem ** Select a numbered block
1090 rem **
1100 X=(X/16) : Y=((Y/16)-1)*20 : BLX(ZZ)=X+Y
1110 if BLX(ZZ)>BAM then BLX(ZZ)=BAM
1120 return 
1130 rem **
1140 rem ** select left mouse button block
1150 rem **
1160 X=(X/16) : Y=((Y/16)-1)*20 : BLX1=X+Y
1170 if BLX1>BAM then BLX1=BAM
1180 return 
1190 rem **
1200 rem ** select right mouse button block
1210 rem **
1220 X=(X/16) : Y=((Y/16)-1)*20 : BLX2=X+Y
1230 if BLX2>BAM then BLX2=BAM
1240 return 
1250 rem **
1260 rem **  which icon?
1270 rem **
1280 I=(X/32)+1 : on I goto 1340,1510,1690,1800,3170
1290 return 
1300 return 
1310 rem **
1320 rem ** Load Blocks
1330 rem **
1340 gosub 2010
1350 OLIC=logic : logic=physic : show on : pen JCL
1360 F$=file select$("*.mbk","load blocks")
1370 if F$="" then goto 1470
1380 TP=varptr(F$) : TP1=varptr(FS) : L=dload(TP,TP1,0,4)
1390 if FS<>$4C696F6E then goto 1430
1400 L=dload(TP,TP1,18,4)
1410 if FS=$7793868 then load F$,1 : goto 1460
1411 L=real length(varptr(F$)) : if L=0 then goto 1470
1412 reserve as data 13,L : bload F$,13 : D=depack(start(13)) : if leek(start(13))=$7793868 then bcopy 13 to 1 : erase 13 : goto 1460 else erase 13 : goto 1470
1420 wait vbl : doke $FFFF8240,$700 : wait vbl : doke $FFFF8240,0 : goto 1470
1430 if FS<>$7793868 then wait vbl : doke $FFFF8240,$700 : wait vbl : doke $FFFF8240,0 : goto 1470
1440 L=real length(varptr(F$)) : open in #1,F$ : L=lof(1) : close #1
1450 reserve as data 1,L : bload F$,1 : D=depack(start(1))
1460 gosub 2990 : gosub 690
1470 hide on : logic=OLIC : goto 880
1480 rem **
1490 rem ** load map
1500 rem **
1510 gosub 2010 : OLIC=logic : logic=physic : show on : pen JCL
1520 F$=file select$("*.mbk","load Map")
1530 if F$="" then goto 1650
1540 TP=varptr(F$) : TP1=varptr(FS) : L=dload(TP,TP1,0,4)
1550 if FS<>$4C696F6E then goto 1590
1560 L=dload(TP,TP1,18,4)
1570 if FS=38964820 or FS=$3031973 then load F$,6 : goto 1620
1571 L=real length(varptr(F$)) : if L<=0 then wait vbl : doke $FFFF8240,$700 : wait vbl : doke $FFFF8240,0 : goto 1650
1572 erase 13 : reserve as data 13,L : bload F$,13 : D=depack(start(13)) : if leek(start(13))=38964820 or leek(start(13))=$3031973 then erase 6 : bcopy 13 to 6 : erase 13 : goto 1620 else erase 13 : goto 1650
1580 wait vbl : doke $FFFF8240,$700 : wait vbl : doke $FFFF8240,0 : goto 1650
1590 if FS<>38964820 and FS<>$3031973 then wait vbl : doke $FFFF8240,$700 : wait vbl : doke $FFFF8240,0 : goto 1650
1600 open in #1,F$ : L=lof(1) : close #1
1610 erase 6 : reserve as data 6,L : bload F$,6
1620 A=leek(start(6)) : if A=$3031973 then T=map toggle(start(6))
1630 MX=x limit(start(6),0,320)
1640 MY=y limit(start(6),0,192)
1650 logic=OLIC : hide on : goto 880
1660 rem **
1670 rem ** Save world map
1680 rem **
1690 gosub 2010 : OLIC=logic : logic=physic : show on : pen JCL
1700 F$=file select$("*.mbk","Save a World map")
1710 if F$="" then goto 1750
1720 A=instr(F$,".") : if A=0 then F$=F$+".mbk"
1730 if upper$(right$(F$,4))=".MBK" then save F$,6 : goto 1750
1740 bsave F$,start(6) to start(6)+length(6)
1750 A=leek(start(6)) : if A=$3031973 then A=map toggle(start(6))
1760 logic=OLIC : hide on : goto 880
1770 rem **
1780 rem ** save landscape map
1790 rem **
1800 gosub 2010 : A=map toggle(start(6))
1810 OLIC=logic : logic=physic : show on : pen JCL : goto 1700
1820 rem **
1830 rem ** Set up area blocks (crap version)
1840 rem **
1850 erase 5 : reserve as data 5,length(1)*2
1860 copy start(1),start(1)+8 to start(5)
1870 AT=start(1)+8 : N=deek(start(1)+6) : IM=2^(deek(start(1)+4))
1880 NAT=start(5)+8 : NAT2=start(5)+8+N : for I=1 to IM
1890 for TT=AT to AT+N-4 step 4
1900 loke NAT,leek(TT) : loke NAT+4,leek(TT+4)
1910 loke NAT2,$FFFF0000 : loke NAT2+4,0
1920 NAT=NAT+4 : NAT2=NAT2+4
1930 next TT : AT=AT+N : NAT=NAT+N : NAT2=NAT2+N
1940 next I
1950 doke (start(5)+6),N*2
1960 erase 1
1970 return 
1980 rem **
1990 rem ** Switch area off
2000 rem **
2010 BX1=0 : BY1=0 : BX2=-100 : BY2=-100
2020 rem **
2030 rem ** Update area (ie. wipe old area and highlight new one)
2040 rem **
2050 if OBX1>OBX2 then goto 2100
2060 if OBY1>OBY2 then goto 2100
2070 for YY=OBY1 to OBY2 step 16 : for XX=OBX1 to OBX2 step 16
2080 W=which block(start(6),XX,YY) : if W>=NBLK then set block start(6),XX,YY,W-NBLK
2090 next XX : next YY
2100 if BX1>BX2 then goto 2150
2110 if BY1>BY2 then goto 2150
2120 for YY=BY1 to BY2 step 16 : for XX=BX1 to BX2 step 16
2130 W=which block(start(6),XX,YY) : if W<NBLK then set block start(6),XX,YY,W+NBLK
2140 next XX : next YY
2150 OBY1=BY1 : OBY2=BY2 : OBX1=BX1 : OBX2=BX2
2160 return 
2170 rem **
2180 rem ** Copy an area to cursor (highlight removed from copy)
2190 rem **
2200 if BX1>BX2 then return 
2210 if BY1>BY2 then return 
2220 NX=CCX : NY=CCY
2230 for YY=BY1 to BY2 step 16 : for XX=BX1 to BX2 step 16
2240 W=which block(start(6),XX,YY) : if W>=NBLK then W=W-NBLK
2250 set block start(6),NX,NY,W
2260 NX=NX+16 : next XX : NX=CCX : NY=NY+16 : next YY
2270 return 
2280 rem **
2290 rem ** Save an area
2300 rem **
2310 if BX1>BX2 then return 
2320 if BY1>BY2 then return 
2330 W=(BX2-BX1)/16 : H=(BY2-BY1)/16
2340 erase 14 : reserve as work 14,8+(W*H*2)
2350 AT=start(14) : loke AT,$7792356 : doke AT+4,W : doke AT+6,H : AT=AT+8
2360 for YY=BY1 to BY2 step 16 : for XX=BX1 to BX2 step 16
2370 W=which block(start(6),XX,YY) : if W>=NBLK then W=W-NBLK
2380 doke AT,W : AT=AT+2
2390 next XX : next YY
2400 OLIC=logic : logic=physic : show on : pen JCL
2410 F$=file select$("*.mbk","save area")
2420 logic=OLIC : hide 
2430 if F$="" then return 
2440 bsave F$,start(14) to AT
2450 erase 14
2460 return 
2470 rem **
2480 rem ** Load an area
2490 rem **
2500 OLIC=logic : logic=physic : show on : pen JCL
2510 F$=file select$("*.mbk","load area")
2520 logic=OLIC : hide 
2530 if F$="" then return 
2540 open in #1,F$ : L=lof(#1) : close #1
2550 erase 14 : reserve as work 14,L
2560 bload F$,14
2570 AT=start(14)
2580 if leek(AT)<>$7792356 then return 
2590 W=deek(AT+4) : H=deek(AT+6) : AT=AT+8
2600 for YY=CCY to CCY+(H*16) step 16 : for XX=CCX to CCX+(W*16) step 16
2610 B=deek(AT) : set block start(6),XX,YY,B : AT=AT+2
2620 next XX : next YY
2630 return 
2640 rem **
2650 rem ** Fill an area with one block (held in BLK)
2660 rem **
2670 if BX1>BX2 then return 
2680 if BY1>BY2 then return 
2690 for YY=BY1 to BY2 step 16 : for XX=BX1 to BX2 step 16 : set block start(6),XX,YY,BLK : next XX : next YY
2700 return 
2710 stop 
2720 erase 3 : erase 4 : erase 5 : erase 6 : erase 7 : erase 15
2730 stop 
2740 rem **
2750 rem ** Fill an area with bricks (left/right mousekey blocks)
2760 rem **
2770 ZZ=val(Z$) : KP=0 : if C>10 then KP=-1
2780 if BX1>BX2 then return 
2790 if BY1>BY2 then return 
2800 B=1 : for YY=BY1 to BY2 step 16 : FB=B
2810 for XX=BX1 to BX2 step 16 : set block start(6),XX,YY,BLX(FB) : inc FB : if FB>ZZ then FB=1
2820 next XX : if KP then inc B : if B>ZZ then B=1
2830 next YY
2840 return 
2850 rem **
2860 rem ** Repeat area to cursor position (eg. tiles)
2870 rem **
2880 if BX1>BX2 or BY1>BY2 or BX2>CCX xor BY2>CCY then return 
2890 for YY=BY1 to BY2 step 16 : OX=BX1 : for XX=BX2+16 to CCX step 16
2900 W=which block(start(6),OX,YY) : if W>=NBLK then W=W-NBLK
2910 set block start(6),XX,YY,W : OX=OX+16 : next XX : next YY
2920 for XX=BX1 to CCX step 16 : OY=BY1 : for YY=BY2+16 to CCY step 16
2930 W=which block(start(6),XX,OY) : if W>=NBLK then W=W-NBLK
2940 set block start(6),XX,YY,W : OY=OY+16 : next YY : next XX
2950 return 
2960 rem **
2970 rem ** Set up area blocks (crap version)
2980 rem **
2990 erase 5 : reserve as data 5,length(1)*2
3000 kopy start(1),start(5),40
3010 AT=start(1)+40 : N=deek(start(1)+6) : IM=2^(deek(start(1)+4)) : IMI=(16/IM)*256
3020 NAT=start(5)+40 : NAT2=NAT+N : IA=start(2)+40 : for I=1 to IM : II=0
3030 for TT=AT to AT+N-4 step 4
3040 loke NAT,leek(TT)
3050 loke NAT2,leek(TT) or leek(IA+II)
3060 NAT=NAT+4 : NAT2=NAT2+4 : II=II+4 : if II>=256 then II=0
3070 next TT : AT=AT+N : NAT=NAT+N : NAT2=NAT+N
3080 IA=IA+IMI : next I
3090 doke (start(5)+6),N*2
3100 erase 1
3110 NBLK=deek(start(5)+6)/512
3120 BAM=(N/256)-1
3130 return 
3140 rem **
3150 rem ** Resize map
3160 rem **
3170 OLIC=logic : logic=physic : wipe physic
3180 home : print "RESIZE MAP"
3190 OW=(deek(start(6)+4)+2)/2 : OH=deek(start(6)+6)/2
3200 print : print "OLD WIDTH = ";OW : print "OLD HEIGHT = ";OH
3210 print : input "NEW WIDTH ";W : if W<20 then W=20
3220 print : input "NEW HEIGHT ";H : if H<12 then H=12
3230 erase 1 : bcopy 6 to 1 : erase 6 : reserve as data 6,(W*H*2)+8 : fill start(6) to start(6)+length(6),0
3240 kopy start(1),start(6),8
3250 doke start(6)+4,(W*2)-2 : doke start(6)+6,H*2
3260 if W<OW then MW=W else MW=OW
3270 if H<OH then MH=H else MH=OH
3280 OB=start(1)+8 : B=start(6)+8
3290 for YY=1 to MH : kopy OB,B,MW*2
3300 B=B+(W*2) : OB=OB+(OW*2)
3310 next YY
3320 logic=OLIC : fastcopy start(3),logic : screen swap : fastcopy physic,logic
3330 MX=x limit(start(6),0,320)
3340 MY=y limit(start(6),0,192)
3350 return 

Reserved memory banks:
 2:  icons   0x001100
 5:  data    0x001200
 6:  data    0x001400
 7:  data    0x000a00
15:  data    0x000a00
