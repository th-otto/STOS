10 rem  **********************************************************************
20 rem  *                                                                    *
30 rem  * Program     : VIEW_LBM.BAS                                         *
40 rem  *               This test program will attempt to load an ILBM       *
50 rem  *               [Interleaved BitMap] image into memory bank #8       *
60 rem  *               and determine its screen size and number of colours. *
70 rem  *               From this it will then attempt to show the image on  *
80 rem  *               screen in the proper video mode.                     *
90 rem  *                                                                    *
100 rem * ½ 1995, 1996, 1997, 1998 Anthony Hoskin.                           *
110 rem *                          45 Wythburn Road,                         *
120 rem *                          Newbold,                                  *
130 rem *                          Chesterfield,                             *
140 rem *                          Derbyshire,                               *
150 rem *                          S41  8DP [U.K.]                           *
160 rem *                                                                    *
170 rem * Machine(s)  : Falcon 030 only.                                     *
180 rem * Resolutions : Initially runs from ST Med-resolution.               *
190 rem * Monitor     : TV, RGB/VGA colour monitor.                          *
200 rem *                                                                    *
210 rem * Important   : This program will run ONLY when the following        *
220 rem *               extension(s) and patched library file(s) are         *
230 rem *               installed......                                      *
240 rem *                                                                    *
250 rem * ST(e)/TT/Falcon 030 System Control => v0.9 ½ Anthony Hoskin.       *
260 rem * Falcon 030 VIDEO (III) Extension   => v0.4 ½ Anthony Hoskin.       *
270 rem * Falcon 030 GRAFIX (III) Extension  => v0.2 ½ Anthony Hoskin.       *
280 rem *                                                                    *
290 rem *                 Interpreter library files                          *
300 rem *                 =========================                          *
310 rem *                                                                    *
320 rem *       'SPRIT101.BIN' - the STOS sprite manager library.            *
330 rem *       'WINDO102.BIN' - the STOS window manager library.            *
340 rem *                                                                    *
350 rem *         Compiler library files [registered users only]             *
360 rem *         ==============================================             *
370 rem *                                                                    *
380 rem *       'SPRIT101.LIB' - the STOS sprite manager library.            *
390 rem *       'WINDO102.LIB' - the STOS window manager library.            *
400 rem *                                                                    *
410 rem **********************************************************************
420  : 
430 rem ~~~~~~~~~~~~~~~~~~~ Initialise the program ~~~~~~~~~~~~~~~~~~~~
440  : 
450 key off : hide on : curs off : cls : change mouse 2
460 OLD_DRV=drive : OLD_DR$=dir$ : if OLD_DR$="" then OLD_DR$="\"
470 EXT$="*.IFF"
480  : 
490 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
500 rem Initialise the STOS memory bank used for the 256 colour screen.
510 rem We shall use STOS memory bank #6 as the PHYSICAL screen memory
520 rem into which we shall decompress InterLeaved BitMap pictures (LBM).
530 rem This memory bank should be large enough to hold a 768*480*256
540 rem overscanned screen.
550  : 
560 if length(5)<>0 then erase 5
570 if length(6)<>0 then erase 6
580 reserve as work 5,512*1024
590 reserve as work 6,512*1024
600  : 
610 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
620 rem              Display the program introduction.
630  : 
640 locate 0,2
650 centre "STOS Basic" : print : print : centre "and the" : print : print 
660 centre "Falcon 030 VIDEO (III) Extension v0.4" : print : print 
670 centre "Demo." : print : print 
680 centre "Loads and displays 256 colour ILBM" : print 
690 centre "(InterLeavedBitMap) format pictures." : print : print 
700 centre chr$(189)+" A. Hoskin 1998." : print 
710 centre "   45 Wythburn Road," print 
720 centre "   Newbold,         " print 
730 centre "   Chesterfield,    " print 
740 centre "   Derbyshire.      " print 
750 centre "   S41 8DP   U.K    " print : print 
760 centre "Press mouse key to continue." : print 
770 while mouse key=false : wend 
780  : 
790 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
800 rem              This is the main program loop here.
810  : 
820 on error goto 2170
830 cls : gosub 930
840 if LD_FLAG=true then gosub 1080 else goto 870
850 while mouse key=false : wend : if mouse key=1 then goto 830
860 erase 5 : erase 6 : erase 8
870 drive=OLD_DRV : dir$=OLD_DR$
880 default : clear key : end 
890  : 
900 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
910 rem Choose via the fileselector a 256 colour ILBM picture.
920  : 
930 show on : FILE$=file select$(EXT$," Please Load InterLeaved BitMap  Picture.",2) : hide on : if FILE$="" then LD_FLAG=false : show on : return 
940 EXT$=dir$
950 hide on : open in #1,FILE$ : SIZE=lof(#1) : close #1
960 cls : centre "Loading "+FILE$ : print 
970 if length(8)<>0 then erase 8
980 reserve as work 8,SIZE : bload FILE$,8 : S8=start(8) : E8=S8+SIZE
990 LD_FLAG=true : return 
1000  : 
1010 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1020 rem Now determine the structure of InterLeaved BitMap picture.
1030 rem And set up the video mode to display it.
1040 rem
1050 rem 1st off, an ILBM picture has certain header identifiers
1060 rem so we can now check if we really did load an ILBM picture.
1070  : 
1080 FM_CHUNK=hunt(S8 to E8,"FORM")
1090 if FM_CHUNK=0 then cls : cdown : cdown : centre FILE$ : print : print : centre "This file isn't an" : print : centre "Interleaved BitMap Picture." : return 
1100  : 
1110 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1120 rem Use the VID_MDE=vget ilbm mode(8) function to determine the
1130 rem video mode required for the chosen ILBM picture.
1140  : 
1150 VID_MDE=vget ilbm mode(8) : if btst(7,VID_MDE)=false then goto 1440
1160  : 
1170 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1180 rem Use the MON=montype to determine if we need RGB or VGA
1190 rem video mode for the chosen ILBM picture.
1200  : 
1210 MON=montype : rem Returns 0 = Mono , 1 = RGB , 2 = VGA , 3 = TV
1220  : 
1230 rem Check if picture mode matches monitor for VGA mode.
1240  : 
1250 IMAGE_WIDTH=deek(bmhdchunk(8)+8) : rem Get picture width.
1260 IMAGE_HEIGHT=deek(bmhdchunk(8)+10) : rem Get picture height.
1270 N_COLOURS=leek(cmapchunk(8)+4)/3 : rem Get number of colours in picture.
1280  : 
1290 rem Picture mode does not match monitor so adjust video mode to suit
1300 rem image size.
1310  :
1315 IH=IMAGE_HEIGHT
1320 if (IMAGE_HEIGHT mod 200=0) and (MON=2) then IH=int((IMAGE_HEIGHT*12)/10) : goto 1370
1330 if (IMAGE_HEIGHT mod 240=0) and (MON<>2) then IH=int((IMAGE_HEIGHT*10)/12) : goto 1370
1340  : 
1350 rem Determine video mode from new WIDTH/HEIGHT parameters to match monitor
1360  :
1361 on error goto 1380
1370 VID_MDE=whichmode(IMAGE_WIDTH,IH,N_COLOURS)
1375 goto 1390
1380 cls : cdown : cdown : centre FILE$ : print : print
1381 centre "Sorry, cannot display" : print
1382 centre "this Interleaved BitMap Picture" : print
1382 centre "on the current monitor." : print : print
1383 centre "There is no legal matching video mode for this picture." : print : print
1384 print using "Image width ###";IMAGE_WIDTH; : print using " : Height ###";IMAGE_HEIGHT; : print using " : Colours ###";N_COLOURS
1385 return 
1390  : on error goto 2170
1400 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1410 rem Test if the video memory size required exceeds the length of the
1420 rem assigned STOS memory bank used for the PHYSICAL 256 colour screen.
1430  : 
1440 if length(6)<vgetsize(VID_MDE) then cls : cdown : cdown : centre FILE$ : print : print : centre "Sorry, cannot display this" : print : centre "Interleaved BitMap Picture" : print : centre "reserved memory bank is too small." : return 
1450  : 
1460 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1470 rem Now we can attempt to display the 256 colour ILBM picture in
1480 rem assigned PHYSICAL 256 colour screen, STOS memory bank #6.
1490 rem Enter Falcon 030 bus control mode (faster processing).
1500  : 
1510 _cpuspeed 16 : _blitterspeed 16 : _falconbus 
1520 OLD_PHYS=physic : rem Remember OLD PHYSIC
1530 OLD_LOGIC=logic : rem Remember OLD LOGIC
1540 OLD_BACK=back : rem Remember OLD BACK
1550 OLD_MD=vgetmode : rem Remember OLD VIDEO MODE
1560  : 
1570 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1580 rem Clear the STOS memory bank #6, used as 256 colour screen
1590 rem (this is equivalent to CLS).
1600  : 
1610 quickwipe start(5),length(5)
1620 quickwipe start(6),length(6)
1630  : 
1640 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1650 rem Now convert our ILBM picture to a 256 colour screen.
1660  : 
1670 X=dpack ilbm(8,6)
1680  : 
1690 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1700 rem Then set up the required video mode and set the palette.
1710  : 
1720 physic=start(6) : rem Set PHYSIC to address of memory bank #6.
1730 logic=start(6) : rem Set LOGIC to address of memory bank #6.
1740 back=start(5) : rem Set BACK to address of memory bank #5.
1750 vsetmode VID_MDE : rem Set up the required video mode.
1760 ilbmpalt 8 : rem Set the palette to that of the ILBM picture.
1770  : 
1780 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1790 rem Now display some text via LINE_A TEXTBLIT extension.
1800  : 
1810 FG=brightest : BG=darkest
1820 gemtext color FG,BG : gemtext mode 0
1830 A$="Mode   "+hex$(VID_MDE,4)
1840 B$="Physic "+hex$(physic,6)
1850 C$="Logic  "+hex$(logic,6)
1860 D$="Back   "+hex$(back,6)
1870 remgemtext 8,8,A$ : gemtext 8,16,B$ : gemtext 8,24,C$ : gemtext 8,32,D$
1880  : 
1890 B$="Physic "+hex$(start(6),6)
1900 C$="Logic  "+hex$(start(6),6)
1910 remgemtext 8,48,B$ : gemtext 8,56,C$
1920  : 
1930 X=(scr width-(len(FILE$)*8))/2 : Y=scr height-32
1940 gemtext X,Y,FILE$
1950 M$="Press mousekey to load another picture."
1960 X=(scr width-(len(M$)*8))/2 : Y=scr height-16
1970 gemtext X,Y,M$
1980  : 
1990 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2000 rem Hold picture until a mousekey is pressed.
2010  : 
2020 while mouse key=false : wend : palfade out 
2030  : 
2040 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2050 rem Then return to original physic, logic and video mode.
2060 rem And return to STe emulation bus control before returning
2070 rem from this subroutine to the main program loop.
2080  : 
2090 physic=OLD_PHYS : logic=OLD_LOGIC : back=OLD_BACK : vsetmode OLD_MD
2100 cls : locate 1,5 : centre "Click LEFT mouse key to Load Another Picture."
2110 locate 1,7 : centre "Click RIGHT mouse key to Quit."
2120 _cpuspeed 8 : _blitterspeed 8 : _stebus : return 
2130  : 
2140 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2150 rem End of this program example for Falcon Extension video commands.
2160 rem ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2170 on error goto 0 : mode 1
2180 print "Error #"+str$(errn)-" "
2190 print "at line #"+str$(errl)-" "
2200 resume 850
2210 end 
